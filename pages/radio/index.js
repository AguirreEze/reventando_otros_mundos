import AnimePreview from "components/AnimePreview"
import AnimeForm from "components/AnimeForm"
import { useSession } from "next-auth/react"
import Head from "next/head"
import { useState } from "react"
import styles from "./styles.module.scss"
import connectDB from "middleware/mongo"
import Anime from "models/Anime"
import Modal from "components/Modal"

export default function Radio({ list }) {
  const [showModal, setShowModal] = useState(false)
  const { data: session } = useSession()
  return (
    <article>
      <Head>
        <title>Invernalia</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={styles.container}>
        <h1 className={styles.title}>Invernalia</h1>
        <p className={styles.description}>
          Estos son los animes vistos y rese√±ados en el programa Invernalia
        </p>
        {session && session.user.group === "Admin" && (
          <button
            onClick={() => setShowModal(!showModal)}
            className={styles.button}
          >
            + Add Anime +
          </button>
        )}
        {list.length === 0 && <h2>No hay animes en la lista</h2>}
        <ul className={styles.list}>
          {list
            .sort((a, b) => (a.createdAt > b.createdAt ? -1 : 1))
            .map((e) => (
              <AnimePreview
                key={e.id}
                name={e.name}
                cover={e.cover}
                id={e.id}
              />
            ))}
        </ul>
      </section>
      {showModal && (
        <Modal onClose={setShowModal}>
          <AnimeForm onClose={setShowModal} />
        </Modal>
      )}
    </article>
  )
}

export async function getServerSideProps() {
  try {
    await connectDB()
    const res = await Anime.find({})

    const list = res.map((doc) => {
      const anime = doc.toJSON()
      anime.id = doc.id.toString()
      return anime
    })
    return { props: { list } }
  } catch (err) {
    return {
      notFound: true,
    }
  }
}
